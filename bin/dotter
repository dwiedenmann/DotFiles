#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import argparse
import os
import sys
import yaml

def deploy(args):
    os.chdir(args.directory)

    # Load configuration
    try:
        with open(args.config) as conf:
            configuration = yaml.safe_load(conf)
    except FileNotFoundError:
        print("Error: No such file", args.config)
        return 1

    # Load secrets
    try:
        with open(args.secrets) as sec:
            secrets = yaml.safe_load(sec)
    except FileNotFoundError:
        secrets = dict()

    # Get files
    if "files" in configuration:
        files = configuration["files"]
    else:
        files = dict()
        print("Warning: no files in configuration.")

    # Get variables and update them with secrets
    if "variables" in configuration:
        variables = configuration["variables"]
    else:
        variables = dict()
    variables.update(secrets)

    for filename in files:
        deploy_file(filename, files[filename], variables,
                args.verbose, args.dry_run)


def deploy_file(src_filename, dst_filename, variables, verbose, dry_run):
    src_filename = src_filename.replace("~", os.path.expanduser("~"))
    dst_filename = dst_filename.replace("~", os.path.expanduser("~"))
    if verbose: print("Copying", src_filename, "to", dst_filename)
    if dry_run: return
    try:
        with open(src_filename, "rb") as src:
            try:
                os.makedirs(os.path.split(dst_filename)[0])
            except FileExistsError: pass
            mode = os.stat(src_filename).st_mode
            with open(dst_filename, "wb") as dst:
                content = src.read()
                for var in variables:
                    content = content.replace(b"{{ " + var.encode() + b" }}",
                            variables[var].encode())
                dst.write(content)
            os.chmod(dst_filename, mode)
    except FileNotFoundError:
        print("Warning: File", src_filename, "not found, skipping...")
    except IsADirectoryError:
        if verbose: print("Recursing into", src_filename)
        try:
            os.makedirs(dst_filename)
        except FileExistsError: pass
        for file in os.listdir(src_filename):
            deploy_file(os.path.join(src_filename, file),
                    os.path.join(dst_filename, file),
                    variables, verbose, dry_run)


def configure(args):
    os.chdir(args.directory)
    if args.file:
        try:
            with open(args.config) as conf:
                configuration = yaml.safe_load(conf)
                if "files" not in configuration:
                    configuration["files"] = dict()
                config = configuration["files"]
        except FileNotFoundError:
            print("Warning: File", args.config, "not found, will create...")
            config = {}
            configuration = {"files": config}
    elif args.variable:
        try:
            with open(args.config) as conf:
                configuration = yaml.safe_load(conf)
                if "variables" not in configuration:
                    configuration["variables"] = dict()
                config = configuration["variables"]
        except FileNotFoundError:
            print("Warning: File", args.config, "not found, will create...")
            config = {}
            configuration = {"variables": config}
    elif args.secret:
        try:
            with open(args.secrets) as sec:
                configuration = yaml.safe_load(sec)
                config = configuration
        except FileNotFoundError:
            print("Warning: File", args.secret, "not found, will create...")
            configuration = config = {}

    if args.add:
        if args.verbose:
            print("Inserting value into configuration, before:")
            print(config)
        if not args.dry_run: config[args.add[0]] = args.add[1]
        if args.verbose:
            print("After:")
            print(config)
    elif args.remove:
        if args.verbose:
            print("Removing value from configuration, before:")
            print(config)
        if not args.dry_run:
            if args.remove[0] in config:
                del config[args.remove[0]]
            else:
                print("Warning: No value", args.src, "in configuration.")
    elif args.display:
        print(yaml.safe_dump(config, default_flow_style=False)[:-1])

    filename = args.config if (args.file or args.variable) else args.secrets
    with open(filename, "w") as conf:
        yaml.safe_dump(configuration, conf, default_flow_style=False)

def main():
    parser = argparse.ArgumentParser(
            description="A small dotfile manager and templater.")
    subparsers = parser.add_subparsers()

    parser.add_argument("-d", "--directory", default=".",
            help="Do all operations relative to this directory. Default is .")
    parser.add_argument("-c", "--config", default="dotter.yml",
            help="Config file for dotter. Default is dotter.yml")
    parser.add_argument("-s", "--secrets", default="secrets.yml",
            help="Secrets file for dotter, doesn't have to exist." +
            "Default is secrets.yml")
    parser.add_argument("-v", "--verbose", action="store_true",
            help="Print information about what's being done.")
    parser.add_argument("--dry-run", action="store_true",
            help="Dry run - don't do anything, only print information. " +
            "Implies --verbose.")

    deploy_parser = subparsers.add_parser("deploy",
            help="deploy -h",
            description="Copy all files to their configured locations.")
    deploy_parser.set_defaults(func=deploy)

    config_parser: argparse.ArgumentParser = subparsers.add_parser("config",
            help="config -h",
            description="Configure files/variables")
    target = config_parser.add_mutually_exclusive_group(required=True)
    target.add_argument("-f", "--file", action="store_true",
            help="Operate on files")
    target.add_argument("-v", "--variable", action="store_true",
            help="Operate on variables")
    target.add_argument("-s", "--secret", action="store_true",
            help="Operate on secrets")
    action = config_parser.add_mutually_exclusive_group(required=True)
    action.add_argument("-a", "--add", nargs=2,
            help="In case of file, add file -> target entry, " +
            "in case of variable/secret, add key -> value entry.")
    action.add_argument("-r", "--remove", nargs=1,
            help="Remove a file or variable from configuration.")
    action.add_argument("-d", "--display", action="store_true",
            help="Display the configuration.")
    action.set_defaults(func=configure)

    args = parser.parse_args()

    if "func" not in args:
        parser.print_help()
        return

    if args.dry_run:
        args.verbose = True

    exit_code = args.func(args)
    if exit_code: exit(exit_code)

if __name__ == "__main__":
    main()